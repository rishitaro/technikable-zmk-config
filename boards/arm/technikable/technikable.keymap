/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY_BASE 1

#define TBLE_ORTHO   true
// #define TBLE_MIT     true
// #define TBLE_DUAL_2U true

#define BAS_L 0
#define NUM_L 1
#define SYM_L 2
#define NAV_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
	tri_layer {
	    if-layers = <NUM_L SYM_L>;
	    then-layer = <NAV_L>;
	};
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp TAB    &kp Q      &kp W      &kp E       &kp R          &kp T          &kp Y            &kp U          &kp I       &kp O      &kp P         &kp BSPC
 &kp ESC    &kp A      &kp S      &kp D       &kp F          &kp G          &kp H            &kp J          &kp K       &kp L      &kp SEMI      &kp SQT
 &kp LSHFT  &kp Z      &kp X      &kp C       &kp V          &kp B          &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH      &kp RET
                       &kp LCTRL  &kp LGUI    &mo NUM_L      &kp SPACE      &kp SPACE        &mo NAV_L      &kp RALT    &kp RCTRL
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans     &kp N1     &kp N2     &kp N3      &kp N4    &kp N5      &kp N6        &kp N7         &kp N8       &kp N9       &kp N0     &kp DEL
&trans     &trans     &trans     &trans      &trans    &trans      &trans        &kp LARW       &kp DARW     &kp UARW     &kp RARW   &kp BSLH
&trans     &trans     &trans     &trans      &trans    &trans      &trans        &trans         &trans       &trans       &trans     &trans
                      &trans     &trans      &trans    &trans      &trans        &trans         &trans       &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&kp TILDE  &kp LS(N1)   &kp LS(N2) &kp LS(N3)  &kp LS(N4)   &kp LS(N5)     &kp LS(N6)     &kp LS(N7)    &kp LS(N8)       &kp LS(N9)         &kp LS(N0)       &trans
&trans     &trans       &trans     &trans      &trans       &trans         &trans         &kp MINUS     &kp EQUAL        &kp LBKT           &kp RBKT         &kp PIPE
&trans     &trans       &trans     &trans      &trans       &trans         &trans         &kp UNDER     &kp PLUS         &kp LBRC           &kp RBRC         &trans
                        &trans     &trans      &trans       &trans         &trans         &trans        &trans           &trans
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)       &bt BT(4)    &trans       &trans      &trans      &trans     &trans     &trans     &kp DEL
&trans     &trans     &trans     &trans      &trans          &trans       &trans       &kp LARW    &kp DARW    &kp UARW   &kp RARW   &trans
&trans     &trans     &trans     &trans      &trans          &trans       &trans       &trans      &trans      &trans     &trans
                      &trans     &trans      &trans          &trans       &trans       &trans      &trans      &trans
            >;
        };

    };
};

